#!/usr/bin/env ruby

require "thor"
require "highline/import"

require_relative "../lib/cheetahmail"

class CheetahMailApp < Thor
  class_option :username, required: true, aliases: "u"
  class_option :password, required: true, aliases: "p"

  desc "segment", "Download a segment"
  method_option :segment
  def segment
    login

    segmentation = CheetahMail::Segmentation.new

    to_download = nil

    if options[:segment]
      to_download = segmentation.segments.find { |s| s.name == options[:segment] }
    else
      choose do |menu|
        menu.prompt = "Choose a segment to download: "

        segmentation.segments.each do |segment|
          menu.choice("#{segment.name} (ID: #{segment.id})") { to_download = segment }
        end
      end
    end

    if to_download
      to_download.download
      puts to_download.filename
    else
      $stderr.puts "That segment doesn't seem to exist."
      exit 1
    end
  end

  desc "mailings", "List recent mailings"
  method_option :segment
  def mailings
    login

    mailings = CheetahMail::Mailings.new.mailings

    if options[:segment]
      mailings = mailings.select { |m| m.segment == options[:segment] }
    end

    mailings = mailings.take(50)

    table_row = "| %-15.15s | %-40.40s | %-15.15s | %9s |\n"

    header = sprintf table_row, "Name", "Subject", "Segment", "Sent to"
    divider = "+" + ("-" * (header.chomp.length - 2)) + "+"

    puts divider
    puts header
    puts divider

    mailings.each do |mailing|
      printf table_row, mailing.name, mailing.subject, mailing.segment, CheetahMail.commaize(mailing.sent_to)
    end

    puts divider
  end

  desc "report", "Get a report for a given mailing"
  method_option :mailing, required: true
  method_option :json, type: :boolean
  def report
    login

    mailings = CheetahMail::Mailings.new.mailings

    unless options[:mailing].downcase == 'all'
      mailings = mailings.find_all { |m| m.subject == options[:mailing] }
    end

    if mailings.length < 1
      $stderr.puts "No matching mailings found"
      exit 1
    end


    if options[:json]
      report = mailings.map { |m| m.report }
      puts JSON.generate({ report: report })
    else
      mailings.each do |mailing|
        report = mailing.report

        puts "Mailing report for #{mailing.subject}"
        table = "%9s: %-9s\n"

        printf table, "Received", CheetahMail.commaize(report[:received])

        puts "\nOpens"
        printf table, "All",      CheetahMail.commaize(report[:opens][:all])
        printf table, "Unique",   CheetahMail.commaize(report[:opens][:unique])

        puts "\nClicks"
        printf table, "All",      CheetahMail.commaize(report[:clicks][:all])
        printf table, "Unique",   CheetahMail.commaize(report[:clicks][:unique])

        puts "\n\n"
      end
    end
  end

  no_commands do
    def login
      login = CheetahMail::Login.new
      login.call(username: options[:username], password: options[:password])
    end
  end
end

CheetahMailApp.start

